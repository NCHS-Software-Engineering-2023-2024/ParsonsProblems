{"ast":null,"code":"var _jsxFileName = \"/workspaces/parsons-problems/client/src/dnd-item.js\",\n  _s = $RefreshSig$();\nimport { useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Card = ({\n  id,\n  text,\n  index,\n  moveCard\n}) => {\n  _s();\n  const ref = useRef(null);\n  const [{\n    handlerId\n  }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    collect(monitor) {\n      return {\n        handlerId: monitor.getHandlerId()\n      };\n    },\n    hover(item, monitor) {\n      var _ref$current;\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action\n      moveCard(dragIndex, hoverIndex);\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    }\n  });\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    type: ItemTypes.ITEM,\n    item: () => {\n      return {\n        id,\n        index\n      };\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const opacity = isDragging ? 0 : 1;\n  drag(drop(ref));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    style: {\n      ...style,\n      opacity\n    },\n    \"data-handler-id\": handlerId,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(Card, \"Bm9lse0dSUrMRW3+tCDIsw+uDQ8=\", false, function () {\n  return [useDrop, useDrag];\n});\n_c = Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["useRef","useDrag","useDrop","ItemTypes","jsxDEV","_jsxDEV","Card","id","text","index","moveCard","_s","ref","handlerId","drop","accept","CARD","collect","monitor","getHandlerId","hover","item","_ref$current","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","isDragging","drag","type","ITEM","opacity","style","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/parsons-problems/client/src/dnd-item.js"],"sourcesContent":["import { useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./ItemTypes.js\";\n\nexport const Card = ({ id, text, index, moveCard }) => {\n\n  const ref = useRef(null);\n  const [{ handlerId }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    collect(monitor) {\n      return {\n        handlerId: monitor.getHandlerId(),\n      };\n    },\n    hover(item, monitor) {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current?.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action\n      moveCard(dragIndex, hoverIndex);\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    },\n  });\n  const [{ isDragging }, drag] = useDrag({\n    type: ItemTypes.ITEM,\n    item: () => {\n      return { id, index };\n    },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n  const opacity = isDragging ? 0 : 1;\n  drag(drop(ref));\n  return (\n    <div ref={ref} style={{ ...style, opacity }} data-handler-id={handlerId}>\n      {text}\n    </div>\n  );\n}"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,OAAO,EAAEC,OAAO,QAAQ,WAAW;AAC5C,SAASC,SAAS,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,OAAO,MAAMC,IAAI,GAAGA,CAAC;EAAEC,EAAE;EAAEC,IAAI;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAErD,MAAMC,GAAG,GAAGZ,MAAM,CAAC,IAAI,CAAC;EACxB,MAAM,CAAC;IAAEa;EAAU,CAAC,EAAEC,IAAI,CAAC,GAAGZ,OAAO,CAAC;IACpCa,MAAM,EAAEZ,SAAS,CAACa,IAAI;IACtBC,OAAOA,CAACC,OAAO,EAAE;MACf,OAAO;QACLL,SAAS,EAAEK,OAAO,CAACC,YAAY,CAAC;MAClC,CAAC;IACH,CAAC;IACDC,KAAKA,CAACC,IAAI,EAAEH,OAAO,EAAE;MAAA,IAAAI,YAAA;MACnB,IAAI,CAACV,GAAG,CAACW,OAAO,EAAE;QAChB;MACF;MACA,MAAMC,SAAS,GAAGH,IAAI,CAACZ,KAAK;MAC5B,MAAMgB,UAAU,GAAGhB,KAAK;MACxB;MACA,IAAIe,SAAS,KAAKC,UAAU,EAAE;QAC5B;MACF;MACA;MACA,MAAMC,iBAAiB,IAAAJ,YAAA,GAAGV,GAAG,CAACW,OAAO,cAAAD,YAAA,uBAAXA,YAAA,CAAaK,qBAAqB,CAAC,CAAC;MAC9D;MACA,MAAMC,YAAY,GAChB,CAACF,iBAAiB,CAACG,MAAM,GAAGH,iBAAiB,CAACI,GAAG,IAAI,CAAC;MACxD;MACA,MAAMC,YAAY,GAAGb,OAAO,CAACc,eAAe,CAAC,CAAC;MAC9C;MACA,MAAMC,YAAY,GAAGF,YAAY,CAACG,CAAC,GAAGR,iBAAiB,CAACI,GAAG;MAC3D;MACA;MACA;MACA;MACA,IAAIN,SAAS,GAAGC,UAAU,IAAIQ,YAAY,GAAGL,YAAY,EAAE;QACzD;MACF;MACA;MACA,IAAIJ,SAAS,GAAGC,UAAU,IAAIQ,YAAY,GAAGL,YAAY,EAAE;QACzD;MACF;MACA;MACAlB,QAAQ,CAACc,SAAS,EAAEC,UAAU,CAAC;MAC/B;MACA;MACA;MACA;MACAJ,IAAI,CAACZ,KAAK,GAAGgB,UAAU;IACzB;EACF,CAAC,CAAC;EACF,MAAM,CAAC;IAAEU;EAAW,CAAC,EAAEC,IAAI,CAAC,GAAGnC,OAAO,CAAC;IACrCoC,IAAI,EAAElC,SAAS,CAACmC,IAAI;IACpBjB,IAAI,EAAEA,CAAA,KAAM;MACV,OAAO;QAAEd,EAAE;QAAEE;MAAM,CAAC;IACtB,CAAC;IACDQ,OAAO,EAAGC,OAAO,KAAM;MACrBiB,UAAU,EAAEjB,OAAO,CAACiB,UAAU,CAAC;IACjC,CAAC;EACH,CAAC,CAAC;EACF,MAAMI,OAAO,GAAGJ,UAAU,GAAG,CAAC,GAAG,CAAC;EAClCC,IAAI,CAACtB,IAAI,CAACF,GAAG,CAAC,CAAC;EACf,oBACEP,OAAA;IAAKO,GAAG,EAAEA,GAAI;IAAC4B,KAAK,EAAE;MAAE,GAAGA,KAAK;MAAED;IAAQ,CAAE;IAAC,mBAAiB1B,SAAU;IAAA4B,QAAA,EACrEjC;EAAI;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAAlC,EAAA,CAjEYL,IAAI;EAAA,QAGeJ,OAAO,EA8CND,OAAO;AAAA;AAAA6C,EAAA,GAjD3BxC,IAAI;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}