{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sitan\\\\Desktop\\\\Software Engineering\\\\ParsonsProblems\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// Video4Ever Starter Code\n// Dr. Miller\n// Start your React app using npm start while in the client directory\nimport './App.css';\nimport './index.css';\nimport React, { Component, useState, useEffect } from \"react\";\nimport { DndContainer } from \"./dnd-container.js\";\nimport './App.css';\nimport PopUp from \"./pop-up.js\";\n// You can use this function for sending POST requests You can modify it if you want to use it for GET requests as well\n// This is an asynchronous function meaning that it returns a Promise\n// A Promise means it will either return a valid value or reject the request\n// Promises are important for  operations that take time such as querying a database or fetching data from a server\n// Using await means this function will suspend execution until the Promise resolves so it won't return until it has a response\n// The await keyword only works in asynchronous functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function postData(url = \"\", data = {}) {\n  _s();\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: \"POST\",\n    // *GET, POST, PUT, DELETE, etc.\n    mode: \"cors\",\n    // no-cors, *cors, same-origin\n    cache: \"no-cache\",\n    // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"same-origin\",\n    // include, *same-origin, omit\n    headers: {\n      \"Content-Type\": \"application/json\"\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    redirect: \"follow\",\n    // manual, *follow, error\n    referrerPolicy: \"no-referrer\",\n    // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  });\n  return response.json(); // parses JSON response into native JavaScript objects\n\n  // Use this variable whenever you want to connect to the Node.js server\n  // When you create production version of a React app, this address will change\n  const baseURL = \"http://localhost:8000/\";\n  // This is an example variable (message) that can be changed with the setMessage function\n  // The initial state of the message is an empty string. When the variable is changed, it changes everywhere it is used.\n  // This is referred to as a state hook\n  const [message, setMessage] = useState(\"\");\n\n  // useEffect will run when the app loads\n  // This is referred to as an effect hook\n  // This effect will modify the message based on what is returned from a GET request to the server's message \n  useEffect(() => {\n    fetch(`${baseURL}message`).then(res => res.json()).then(data => {\n      setMessage(data.message);\n    });\n  }, []);\n\n  // The message variable is displayed below and will update, if necessary\n  // You can put any Javascript (JSX) code within curly brackets in a React app\n}\n_s(postData, \"ClLa+zvPL6vd0LAuHSvav3BaFBg=\");\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"body\", {\n      className: \"App-body\",\n      children: [/*#__PURE__*/_jsxDEV(DndContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container-md border\",\n        children: \"Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Component","useState","useEffect","DndContainer","PopUp","jsxDEV","_jsxDEV","postData","url","data","_s","response","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","json","baseURL","message","setMessage","then","res","App","className","children","fileName","_jsxFileName","lineNumber","columnNumber","class","_c","$RefreshReg$"],"sources":["C:/Users/sitan/Desktop/Software Engineering/ParsonsProblems/client/src/App.js"],"sourcesContent":["// Video4Ever Starter Code\r\n// Dr. Miller\r\n// Start your React app using npm start while in the client directory\r\nimport './App.css';\r\nimport './index.css';\r\nimport React, { Component, useState, useEffect } from \"react\";\r\nimport { DndContainer } from \"./dnd-container.js\"\r\nimport './App.css';\r\nimport PopUp from \"./pop-up.js\";\r\n  // You can use this function for sending POST requests You can modify it if you want to use it for GET requests as well\r\n  // This is an asynchronous function meaning that it returns a Promise\r\n  // A Promise means it will either return a valid value or reject the request\r\n  // Promises are important for  operations that take time such as querying a database or fetching data from a server\r\n  // Using await means this function will suspend execution until the Promise resolves so it won't return until it has a response\r\n  // The await keyword only works in asynchronous functions\r\n  async function postData(url = \"\", data = {}) {\r\n    // Default options are marked with *\r\n    const response = await fetch(url, {\r\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n      mode: \"cors\", // no-cors, *cors, same-origin\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: \"same-origin\", // include, *same-origin, omit\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      redirect: \"follow\", // manual, *follow, error\r\n      referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\r\n    });\r\n    return response.json(); // parses JSON response into native JavaScript objects\r\n\r\n    // Use this variable whenever you want to connect to the Node.js server\r\n    // When you create production version of a React app, this address will change\r\n    const baseURL = \"http://localhost:8000/\";\r\n    // This is an example variable (message) that can be changed with the setMessage function\r\n    // The initial state of the message is an empty string. When the variable is changed, it changes everywhere it is used.\r\n    // This is referred to as a state hook\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    // useEffect will run when the app loads\r\n    // This is referred to as an effect hook\r\n    // This effect will modify the message based on what is returned from a GET request to the server's message \r\n    useEffect(() => {\r\n      fetch(`${baseURL}message`)\r\n        .then((res) => res.json())\r\n        .then((data) => {setMessage(data.message);}\r\n        );\r\n    }, []);\r\n    \r\n\r\n    // The message variable is displayed below and will update, if necessary\r\n    // You can put any Javascript (JSX) code within curly brackets in a React app\r\n\r\n  }\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <body className=\"App-body\">\r\n      < DndContainer />\r\n        <div class = \"container-md border\">Content</div>\r\n\r\n          \r\n      </body>\r\n\r\n    </div>\r\n  )\r\n} \r\n\r\nexport default App;"],"mappings":";;AAAA;AACA;AACA;AACA,OAAO,WAAW;AAClB,OAAO,aAAa;AACpB,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7D,SAASC,YAAY,QAAQ,oBAAoB;AACjD,OAAO,WAAW;AAClB,OAAOC,KAAK,MAAM,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAeC,QAAQA,CAACC,GAAG,GAAG,EAAE,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EAAAC,EAAA;EAC3C;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAE;IAChCK,MAAM,EAAE,MAAM;IAAE;IAChBC,IAAI,EAAE,MAAM;IAAE;IACdC,KAAK,EAAE,UAAU;IAAE;IACnBC,WAAW,EAAE,aAAa;IAAE;IAC5BC,OAAO,EAAE;MACP,cAAc,EAAE;MAChB;IACF,CAAC;IACDC,QAAQ,EAAE,QAAQ;IAAE;IACpBC,cAAc,EAAE,aAAa;IAAE;IAC/BC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,IAAI,CAAC,CAAE;EAC9B,CAAC,CAAC;EACF,OAAOE,QAAQ,CAACY,IAAI,CAAC,CAAC,CAAC,CAAC;;EAExB;EACA;EACA,MAAMC,OAAO,GAAG,wBAAwB;EACxC;EACA;EACA;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;;EAE1C;EACA;EACA;EACAC,SAAS,CAAC,MAAM;IACdU,KAAK,CAAE,GAAEY,OAAQ,SAAQ,CAAC,CACvBG,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACL,IAAI,CAAC,CAAC,CAAC,CACzBI,IAAI,CAAElB,IAAI,IAAK;MAACiB,UAAU,CAACjB,IAAI,CAACgB,OAAO,CAAC;IAAC,CAC1C,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;;EAGN;EACA;AAEF;AAACf,EAAA,CAvCcH,QAAQ;AAwCzB,SAASsB,GAAGA,CAAA,EAAG;EAEb,oBACEvB,OAAA;IAAKwB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAElBzB,OAAA;MAAMwB,SAAS,EAAC,UAAU;MAAAC,QAAA,gBAC1BzB,OAAA,CAAEH,YAAY;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACf7B,OAAA;QAAK8B,KAAK,EAAG,qBAAqB;QAAAL,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAG5C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEJ,CAAC;AAEV;AAACE,EAAA,GAdQR,GAAG;AAgBZ,eAAeA,GAAG;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}