{"ast":null,"code":"var _jsxFileName = \"/workspaces/parsons-problems/client/src/dnd-item.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./dnd-itemtypes.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DndItem = ({\n  id,\n  text,\n  index,\n  moveItem\n}) => {\n  _s();\n  const ref = useRef(null);\n  const [{\n    handlerId\n  }, drop] = useDrop({\n    accept: ItemTypes.ITEM,\n    collect(monitor) {\n      return {\n        handlerId: monitor.getHandlerId()\n      };\n    },\n    hover(item, monitor) {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action\n      moveItem(dragIndex, hoverIndex);\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    }\n  });\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    type: ItemTypes.ITEM,\n    item: () => {\n      return {\n        id,\n        index\n      };\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  drag(drop(ref));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"details\",\n    ref: ref,\n    style: {\n      ...style,\n      opacity\n    },\n    \"data-handler-id\": handlerId,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(DndItem, \"Bm9lse0dSUrMRW3+tCDIsw+uDQ8=\", false, function () {\n  return [useDrop, useDrag];\n});\n_c = DndItem;\nvar _c;\n$RefreshReg$(_c, \"DndItem\");","map":{"version":3,"names":["React","useRef","useDrag","useDrop","ItemTypes","jsxDEV","_jsxDEV","DndItem","id","text","index","moveItem","_s","ref","handlerId","drop","accept","ITEM","collect","monitor","getHandlerId","hover","item","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","isDragging","drag","type","className","style","opacity","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/workspaces/parsons-problems/client/src/dnd-item.js"],"sourcesContent":["import React, { useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./dnd-itemtypes.js\";\n\nexport const DndItem = ({ id, text, index, moveItem }) => {\n\n  const ref = useRef(null);\n  const [{ handlerId }, drop] = useDrop({\n    accept: ItemTypes.ITEM,\n    collect(monitor) {\n      return {\n        handlerId: monitor.getHandlerId(),\n      };\n    },\n    hover(item, monitor) {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action\n      moveItem(dragIndex, hoverIndex);\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    },\n  });\n  const [{ isDragging }, drag] = useDrag({\n    type: ItemTypes.ITEM,\n    item: () => {\n      return { id, index };\n    },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n  drag(drop(ref));\n  \n  return (\n    <div \n      className=\"details\"\n      ref={ref}\n      style={{ ...style, opacity }} \n      data-handler-id={handlerId}\n      >\n\n      {text}\n    </div>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,SAASC,OAAO,EAAEC,OAAO,QAAQ,WAAW;AAC5C,SAASC,SAAS,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,OAAO,MAAMC,OAAO,GAAGA,CAAC;EAAEC,EAAE;EAAEC,IAAI;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAExD,MAAMC,GAAG,GAAGZ,MAAM,CAAC,IAAI,CAAC;EACxB,MAAM,CAAC;IAAEa;EAAU,CAAC,EAAEC,IAAI,CAAC,GAAGZ,OAAO,CAAC;IACpCa,MAAM,EAAEZ,SAAS,CAACa,IAAI;IACtBC,OAAOA,CAACC,OAAO,EAAE;MACf,OAAO;QACLL,SAAS,EAAEK,OAAO,CAACC,YAAY,CAAC;MAClC,CAAC;IACH,CAAC;IACDC,KAAKA,CAACC,IAAI,EAAEH,OAAO,EAAE;MACnB,IAAI,CAACN,GAAG,CAACU,OAAO,EAAE;QAChB;MACF;MACA,MAAMC,SAAS,GAAGF,IAAI,CAACZ,KAAK;MAC5B,MAAMe,UAAU,GAAGf,KAAK;MACxB;MACA,IAAIc,SAAS,KAAKC,UAAU,EAAE;QAC5B;MACF;MACA;MACA,MAAMC,iBAAiB,GAAGb,GAAG,CAACU,OAAO,CAACI,qBAAqB,CAAC,CAAC;MAC7D;MACA,MAAMC,YAAY,GAChB,CAACF,iBAAiB,CAACG,MAAM,GAAGH,iBAAiB,CAACI,GAAG,IAAI,CAAC;MACxD;MACA,MAAMC,YAAY,GAAGZ,OAAO,CAACa,eAAe,CAAC,CAAC;MAC9C;MACA,MAAMC,YAAY,GAAGF,YAAY,CAACG,CAAC,GAAGR,iBAAiB,CAACI,GAAG;MAC3D;MACA;MACA;MACA;MACA,IAAIN,SAAS,GAAGC,UAAU,IAAIQ,YAAY,GAAGL,YAAY,EAAE;QACzD;MACF;MACA;MACA,IAAIJ,SAAS,GAAGC,UAAU,IAAIQ,YAAY,GAAGL,YAAY,EAAE;QACzD;MACF;MACA;MACAjB,QAAQ,CAACa,SAAS,EAAEC,UAAU,CAAC;MAC/B;MACA;MACA;MACA;MACAH,IAAI,CAACZ,KAAK,GAAGe,UAAU;IACzB;EACF,CAAC,CAAC;EACF,MAAM,CAAC;IAAEU;EAAW,CAAC,EAAEC,IAAI,CAAC,GAAGlC,OAAO,CAAC;IACrCmC,IAAI,EAAEjC,SAAS,CAACa,IAAI;IACpBK,IAAI,EAAEA,CAAA,KAAM;MACV,OAAO;QAAEd,EAAE;QAAEE;MAAM,CAAC;IACtB,CAAC;IACDQ,OAAO,EAAGC,OAAO,KAAM;MACrBgB,UAAU,EAAEhB,OAAO,CAACgB,UAAU,CAAC;IACjC,CAAC;EACH,CAAC,CAAC;EACFC,IAAI,CAACrB,IAAI,CAACF,GAAG,CAAC,CAAC;EAEf,oBACEP,OAAA;IACEgC,SAAS,EAAC,SAAS;IACnBzB,GAAG,EAAEA,GAAI;IACT0B,KAAK,EAAE;MAAE,GAAGA,KAAK;MAAEC;IAAQ,CAAE;IAC7B,mBAAiB1B,SAAU;IAAA2B,QAAA,EAG1BhC;EAAI;IAAAiC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAAjC,EAAA,CAvEYL,OAAO;EAAA,QAGYJ,OAAO,EA8CND,OAAO;AAAA;AAAA4C,EAAA,GAjD3BvC,OAAO;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}