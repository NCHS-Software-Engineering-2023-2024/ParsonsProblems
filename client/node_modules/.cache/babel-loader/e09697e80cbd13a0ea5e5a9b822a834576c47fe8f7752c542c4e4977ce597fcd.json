{"ast":null,"code":"var _jsxFileName = \"/workspaces/parsons-problems/client/src/dnd-container.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { DndContext, KeyboardSensor, PointerSensor, useSensor, useSensors } from \"@dnd-kit/core\";\nimport \"./index.css\";\nimport { SortableContext, arrayMove, sortableKeyboardCoordinates, useSortable } from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport React, { useEffect, useState } from \"react\";\nimport { fileContext } from \"./fileContext.js\";\nimport { snapGridModifier } from \"./snapGridModifier.ts\";\nimport { Grade, Shuffle } from \"./dnd-grading\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SortableItem(props) {\n  _s();\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition\n  } = useSortable({\n    id: props.id\n  });\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    background: props.grade\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"item\",\n    ref: setNodeRef,\n    style: style,\n    ...attributes,\n    ...listeners,\n    children: props.id.id + props.id.name + props.id.index\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(SortableItem, \"+2L8crjQJ00chYdwZr8GQC241GI=\", false, function () {\n  return [useSortable];\n});\n_c = SortableItem;\nexport const DndContainer = () => {\n  _s2();\n  const {\n    file,\n    setFile\n  } = React.useContext(fileContext);\n  const [items, setItems] = useState(Shuffle(file));\n  const [activeId, setActiveId] = useState(null);\n  const [grade, setGrade] = useState(Grade(items));\n  const [loadIn, setLoadIn] = useEffect(() => setItems(file), [file]);\n  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n  function handleDragStart(event) {\n    setActiveId(event.active.id);\n  }\n  function handleDragOver(event, targetItem) {\n    const {\n      active,\n      over\n    } = event;\n    if (activeId !== over.id) {\n      resetGrade();\n      setItems(items => {\n        const oldIndex = items.indexOf(activeId);\n        const newIndex = items.indexOf(over.id);\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  }\n  ;\n  function handleGrade() {\n    setGrade(Grade(items));\n  }\n  function resetGrade() {\n    setGrade(new Array(\"white\"));\n  }\n  function handleShuffle() {\n    setItems(Shuffle(items));\n  }\n  /**\n   * 1) correct num indents is stored in the problem file\n   * 2) CURRENT num indents is \n   * 3) render flexbox to the left of the element \n   */\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sortable-list\",\n      children: /*#__PURE__*/_jsxDEV(DndContext, {\n        sensors: sensors,\n        onDragOver: handleDragOver,\n        onDragStart: handleDragStart,\n        modifiers: [snapGridModifier],\n        children: /*#__PURE__*/_jsxDEV(SortableContext, {\n          items: items,\n          children: items.map((item, index) => /*#__PURE__*/_jsxDEV(SortableItem, {\n            id: item,\n            index: index,\n            grade: grade[item.id]\n          }, item, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"row mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-md-2\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"button\",\n            onClick: handleShuffle,\n            children: \"Shuffle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"col-md-2\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"button\",\n            onClick: handleGrade,\n            children: \"Check\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s2(DndContainer, \"pyVNxZCsaOWvT0riqVZw1w0pqrs=\", false, function () {\n  return [useSensors, useSensor, useSensor];\n});\n_c2 = DndContainer;\nexport default DndContainer;\nvar _c, _c2;\n$RefreshReg$(_c, \"SortableItem\");\n$RefreshReg$(_c2, \"DndContainer\");","map":{"version":3,"names":["DndContext","KeyboardSensor","PointerSensor","useSensor","useSensors","SortableContext","arrayMove","sortableKeyboardCoordinates","useSortable","CSS","React","useEffect","useState","fileContext","snapGridModifier","Grade","Shuffle","jsxDEV","_jsxDEV","Fragment","_Fragment","SortableItem","props","_s","attributes","listeners","setNodeRef","transform","transition","id","style","Transform","toString","background","grade","className","ref","children","name","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","DndContainer","_s2","file","setFile","useContext","items","setItems","activeId","setActiveId","setGrade","loadIn","setLoadIn","sensors","coordinateGetter","handleDragStart","event","active","handleDragOver","targetItem","over","resetGrade","oldIndex","indexOf","newIndex","handleGrade","Array","handleShuffle","onDragOver","onDragStart","modifiers","map","item","class","onClick","_c2","$RefreshReg$"],"sources":["/workspaces/parsons-problems/client/src/dnd-container.js"],"sourcesContent":["import {\n  DndContext,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors\n} from \"@dnd-kit/core\";\nimport \"./index.css\";\n\nimport {\n  SortableContext,\n  arrayMove,\n  sortableKeyboardCoordinates,\n  useSortable\n} from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport React, { useEffect, useState } from \"react\";\nimport { fileContext } from \"./fileContext.js\";\nimport { snapGridModifier } from \"./snapGridModifier.ts\";\nimport { Grade, Shuffle } from \"./dnd-grading\"\nimport \"./index.css\";\n\nfunction SortableItem(props) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition\n  } = useSortable({ id: props.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    background: props.grade\n  };\n\n  return (\n    <div\n      className=\"item\"\n      ref={setNodeRef}\n      style={style}\n      {...attributes}\n      {...listeners}\n    >\n      {props.id.id + props.id.name + props.id.index}\n    </div>\n  );\n}\nexport const DndContainer = () => {\n  const {file, setFile} = React.useContext(fileContext);\n  const [items, setItems] = useState(Shuffle(file));\n  const [activeId, setActiveId] = useState(null);\n  const [grade, setGrade] = useState(Grade(items));\n  const [loadIn, setLoadIn] = \n  \n  useEffect(() => setItems(file), [file]);\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates\n    })\n  );\n  \n\n  function handleDragStart(event) {\n    setActiveId(event.active.id);\n  }\n  function handleDragOver(event, targetItem) {\n\n    const { active, over } = event;\n\n    if (activeId !== over.id) {\n      resetGrade();\n      setItems((items) => {\n        const oldIndex = items.indexOf(activeId);\n        const newIndex = items.indexOf(over.id);\n\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n\n  function handleGrade() {\n    setGrade(Grade(items));\n  }\n  function resetGrade() {\n    setGrade(new Array(\"white\"));\n  }\n  function handleShuffle() {\n    setItems(Shuffle(items))\n  }\n  /**\n   * 1) correct num indents is stored in the problem file\n   * 2) CURRENT num indents is \n   * 3) render flexbox to the left of the element \n   */\n  return (\n    <>\n      <div className=\"sortable-list\">\n          <DndContext\n            sensors={sensors}\n            onDragOver={handleDragOver}\n            onDragStart={handleDragStart}\n            modifiers={[snapGridModifier]}\n            \n          >\n              <SortableContext\n                items={items}\n              >\n                {items.map((item, index) => (\n                  <SortableItem \n                    key={item} \n                    id={item}\n                    index={index}\n                    grade={grade[item.id]}\n                  />\n                ))}\n              </SortableContext>\n\n          </DndContext>\n          \n      </div>\n\n      <div class = \"container text-center\">\n      <div class=\"row mt-3\">\n          <div class=\"col-md-2\">\n            <button \n              class = \"button\"\n              onClick = {handleShuffle}\n            >\n              Shuffle\n            </button>\n          </div>\n          <div class=\"col-md-2\">\n            <button \n              class = \"button\"\n              onClick = {handleGrade}\n            >\n              Check\n            </button>\n          </div>\n      </div>\n      </div>\n    </>\n  );\n\n}\nexport default DndContainer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}